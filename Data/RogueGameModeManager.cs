using NewEditor.Data.NARCTypes;
using NewEditor.Forms;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Label = System.Windows.Forms.Label;

namespace NewEditor.Data
{
    public static class RogueGameModeManager
    {
        static List<List<Boss>> bossPools = new List<List<Boss>>()
        {
            new List<Boss>()
            {
                new Boss(12, "Cheren", 223, 115, 10, new List<string>() { "Lillipup", "Eevee" }),
                new Boss(12, "Hugh", 291, 145, 9, new List<string>() { "Snivy", "Tepig", "Oshawott" }),
                new Boss(12, "Roxie", 295, 116, 10, new List<string>() { "Koffing", "Grimer" }),
                new Boss(12, "Burgh", 225, 113, 11, new List<string>() { "Beedrill" }),
            },
            new List<Boss>()
            {
                new Boss(24, "Cheren", 223, 115, 17, new List<string>() { "Eevee", "Munchlax", "Furret" }),
                new Boss(24, "Roxie", 295, 116, 16, new List<string>() { "Koffing", "Nidorino", "Venomoth" }),
                new Boss(24, "Burgh", 225, 113, 18, new List<string>() { "Dwebble", "Swadloon" }),
                new Boss(24, "Elesa", 226, 112, 18, new List<string>() { "Joltik", "Emolga" }),
            },
            new List<Boss>()
            {
                new Boss(36, "Hugh", 291, 145, 23, new List<string>() { "Herdier", "Servine", "Pignite", "Dewott" }),
                new Boss(36, "Burgh", 225, 113, 24, new List<string>() { "Anorith", "Scyther", "Leavanny" }),
                new Boss(36, "Elesa", 226, 112, 23, new List<string>() { "Emolga", "Emolga", "Zebstrika" }),
                new Boss(36, "Clay", 227, 117, 24, new List<string>() { "Hippopotas", "Quagsire", "Krokorok" }),
            },
            new List<Boss>()
            {
                new Boss(48, "Burgh", 225, 113, 30, new List<string>() { "Anorith", "Scizor", "Leavanny", "Heracross" }),
                new Boss(48, "Elesa", 226, 112, 30, new List<string>() { "Emolga", "Zebstrika", "Ampharos" }),
                new Boss(48, "Clay", 227, 117, 30, new List<string>() { "Krokorok", "Gastrodon", "Graveler", "Gliscor" }),
                new Boss(48, "Colress", 250, 186, 32, new List<string>() { "Bronzor", "Magneton", "Beheeyem" }),
            },
            new List<Boss>()
            {
                new Boss(60, "Hugh", 291, 145, 38, new List<string>() { "Stoutland", "Unfezant", "Serperior", "Emboar", "Samurott" }),
                new Boss(60, "Clay", 227, 117, 38, new List<string>() { "Krookodile", "Camerupt", "Nidoking", "Gliscor", "Excadrill" }),
                new Boss(60, "Skyla", 228, 114, 39, new List<string>() { "Swanna", "Skarmory", "Crobat", "Aerodactyl" }),
                new Boss(60, "Marlon", 230, 119, 38, new List<string>() { "Pelipper", "Ludicolo", "Wailord", "Starmie", "Jellicent" }),
            },
            new List<Boss>()
            {
                new Boss(72, "Cheren", 223, 115, 47, new List<string>() { "Bouffalant", "Cinccino", "Miltank", "Stoutland", "Snorlax", "Porygon-Z" }),
                new Boss(72, "Clay", 227, 117, 46, new List<string>() { "Krookodile", "Gastrodon", "Camerupt", "Nidoking", "Torterra", "Excadrill" }),
                new Boss(72, "Skyla", 228, 114, 46, new List<string>() { "Archeops", "Gliscor", "Mantine", "Mandibuzz", "Braviary" }),
                new Boss(72, "Drayden", 229, 118, 48, new List<string>() { "Altaria", "Kingdra", "Flygon", "Haxorus", "Hydreigon" }),
                new Boss(72, "Marlon", 230, 119, 46, new List<string>() { "Pelipper", "Swampert", "Carracosta", "Gyarados", "Starmie", "Jellicent" }),
                new Boss(72, "Colress", 250, 186, 47, new List<string>() { "Bronzong", "Klinklang", "Magnezone", "Steelix", "Metagross" }),
            },
            new List<Boss>()
            {
                new Boss(84, "Drayden", 229, 118, 56, new List<string>() { "Haxorus", "Salamence", "Garchomp", "Hydreigon", "Latios" }),
                new Boss(84, "Zinzolin", 302, 191, 56, new List<string>() { "Abomasnow", "Walrein", "Weavile", "Mamoswine", "Kyurem" }),
                new Boss(84, "Marshal", 95, 79, 55, new List<string>() { "Mienshao", "Medicham", "Lucario", "Conkeldurr", "Keldeo" }),
                new Boss(84, "Caitlin", 96, 81, 55, new List<string>() { "Reuniclus", "Alakazam", "Slowking", "Gallade", "Mewtwo" }),
                new Boss(84, "Grimsley", 94, 80, 55, new List<string>() { "Bisharp", "Zoroark", "Spiritomb", "Tyranitar", "Darkrai" }),
                new Boss(84, "Shauntal", 93, 78, 55, new List<string>() { "Gengar", "Banette", "Dusknoir", "Chandelure", "Giratina" }),
            },
            new List<Boss>()
            {
                new Boss(96, "Iris", 298, 193, 64, new List<string>() { "Hydreigon", "Aggron", "Togekiss", "Haxorus", "Lapras", "Reshiram" }),
                new Boss(96, "Ghetsis", 301, 189, 64, new List<string>() { "Cofagrigus", "Eelektross", "Drapion", "Swampert", "Salamence", "Zekrom" }),
            }
        };

        static List<Boss> bosses;

        static Random random = new Random();
        static List<OverworldNPC> activeNPCs;
        static List<OverworldNPC> PCRoomNPCs;
        static ScriptFile activeScripts;
        static ScriptFile PCRoomScripts;

        static List<PokemonEntry> pokemonListByBST;
        static List<List<PokemonEntry>> BSTGroups;

        static List<RefByte> StarterHouseScriptBytes = new List<RefByte>()
        {
            0x46, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x51, 0x14, 0x00, 0x00, 0xBA, 0x15, 0x00, 0x00, 0xCB, 0x15, 0x00, 0x00, 0xDC, 0x15, 0x00, 0x00, 0xF0, 0x15, 0x00, 0x00, 0x11, 0x16, 0x00, 0x00, 0x32, 0x16, 0x00, 0x00, 0x43, 0x16, 0x00, 0x00, 0x54, 0x16, 0x00, 0x00, 0x65, 0x16, 0x00, 0x00, 0x76, 0x16, 0x00, 0x00, 0x25, 0x17, 0x00, 0x00, 0xE3, 0x18, 0x00, 0x00, 0x6C, 0x19, 0x00, 0x00, 0x13, 0xFD, 0x02, 0x00, 0x09, 0x00, 0xA3, 0x40, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x04, 0x00, 0x10, 0x00, 0xE3, 0x02, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00, 0x11, 0x00, 0x07, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x04, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2E, 0x00, 0x4F, 0x02, 0x00, 0x00, 0x09, 0x00, 0x08, 0x00, 0x01, 0x00, 0x08, 0x00, 0x01, 0x00, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x10, 0x80, 0x09, 0x00, 0x10, 0x80, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x5D, 0x00, 0x00, 0x00, 0x28, 0x00, 0x20, 0x80, 0x01, 0x00, 0x09, 0x00, 0x20, 0x80, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x44, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x64, 0x00, 0x00, 0x00, 0x6B, 0x16, 0x00, 0x00, 0x65, 0x00, 0x64, 0x00, 0x00, 0x00, 0xF9, 0x15, 0x00, 0x00, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x64, 0x00, 0x00, 0x00, 0xF1, 0x15, 0x00, 0x00, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x20, 0x80, 0x1E, 0x00, 0xA9, 0xFF, 0xFF, 0xFF, 0x3C, 0x00, 0x00, 0x04, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x10, 0x80, 0x09, 0x00, 0x10, 0x80, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x12, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x10, 0x80, 0x09, 0x00, 0x10, 0x80, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x2F, 0x00, 0x00, 0x00, 0x28, 0x00, 0x20, 0x80, 0x01, 0x00, 0x09, 0x00, 0x20, 0x80, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x16, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x20, 0x80, 0x1E, 0x00, 0xD7, 0xFF, 0xFF, 0xFF, 0x3C, 0x00, 0x00, 0x04, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x19, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x3F, 0x00, 0x1E, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x10, 0x80, 0x09, 0x00, 0x10, 0x80, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x16, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x3F, 0x00, 0x1E, 0x00, 0x10, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x0D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x3F, 0x00, 0x4F, 0x02, 0x00, 0x00, 0x08, 0x00, 0x07, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x64, 0x00, 0x00, 0x00, 0xEA, 0x14, 0x00, 0x00, 0x65, 0x00, 0x28, 0x00, 0xA0, 0x40, 0x01, 0x00, 0x63, 0x02, 0x04, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0x74, 0x00, 0x10, 0x00, 0x61, 0x09, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x10, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0xCB, 0x00, 0x25, 0x80, 0x0F, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x01, 0x00, 0x1E, 0x00, 0xB2, 0x01, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x01, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x04, 0x00, 0x1E, 0x00, 0x93, 0x01, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x02, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x07, 0x00, 0x1E, 0x00, 0x74, 0x01, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x03, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x98, 0x00, 0x1E, 0x00, 0x55, 0x01, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x04, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x9B, 0x00, 0x1E, 0x00, 0x36, 0x01, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x05, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x9E, 0x00, 0x1E, 0x00, 0x17, 0x01, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x06, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0xFC, 0x00, 0x1E, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x07, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0xFF, 0x00, 0x1E, 0x00, 0xD9, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x08, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x02, 0x01, 0x1E, 0x00, 0xBA, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x09, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x83, 0x01, 0x1E, 0x00, 0x9B, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x0A, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x86, 0x01, 0x1E, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x0B, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0x89, 0x01, 0x1E, 0x00, 0x5D, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x0C, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0xEF, 0x01, 0x1E, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x0D, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0xF2, 0x01, 0x1E, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x09, 0x00, 0x25, 0x80, 0x08, 0x00, 0x0E, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x28, 0x00, 0x25, 0x80, 0xF5, 0x01, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x80, 0x09, 0x00, 0x01, 0x80, 0x2A, 0x00, 0x00, 0x80, 0x0E, 0x00, 0x2A, 0x00, 0x01, 0x80, 0x04, 0x00, 0x1C, 0x00, 0xF5, 0x0A, 0x2A, 0x00, 0x00, 0x80, 0x1A, 0x00, 0x2A, 0x00, 0x01, 0x80, 0x01, 0x00, 0x1C, 0x00, 0xF5, 0x0A, 0x0A, 0x00, 0x00, 0x80, 0x0A, 0x00, 0x01, 0x80, 0xA9, 0x00, 0x18, 0x05, 0x34, 0x00, 0x02, 0x00, 0x01, 0x00, 0xAA, 0x00, 0x4B, 0x00, 0x36, 0x00, 0x0C, 0x01, 0x10, 0x80, 0x25, 0x80, 0x00, 0x00, 0x05, 0x00, 0x23, 0x00, 0x61, 0x09, 0x23, 0x00, 0x62, 0x09, 0x0A, 0x00, 0x10, 0x80, 0x0A, 0x00, 0x25, 0x80, 0x3F, 0x00, 0xFA, 0x00, 0xD0, 0x07, 0x23, 0x00, 0x01, 0x00, 0x23, 0x00, 0x02, 0x00, 0x23, 0x00, 0x03, 0x00, 0x23, 0x00, 0x04, 0x00, 0x23, 0x00, 0x05, 0x00, 0x23, 0x00, 0x06, 0x00, 0x23, 0x00, 0x07, 0x00, 0x23, 0x00, 0x08, 0x00, 0x23, 0x00, 0x09, 0x00, 0x23, 0x00, 0x0A, 0x00, 0x23, 0x00, 0x0B, 0x00, 0x23, 0x00, 0x0C, 0x00, 0x23, 0x00, 0x0D, 0x00, 0x23, 0x00, 0x0E, 0x00, 0x23, 0x00, 0x0F, 0x00, 0x23, 0x00, 0x10, 0x00, 0x23, 0x00, 0x11, 0x00, 0x23, 0x00, 0x12, 0x00, 0x23, 0x00, 0x13, 0x00, 0x23, 0x00, 0x14, 0x00, 0x23, 0x00, 0x15, 0x00, 0x23, 0x00, 0x16, 0x00, 0x23, 0x00, 0x17, 0x00, 0x23, 0x00, 0x18, 0x00, 0x23, 0x00, 0x19, 0x00, 0x23, 0x00, 0x1A, 0x00, 0x23, 0x00, 0x1B, 0x00, 0x23, 0x00, 0x1C, 0x00, 0x23, 0x00, 0x1D, 0x00, 0x23, 0x00, 0x1E, 0x00, 0x23, 0x00, 0x1F, 0x00, 0x23, 0x00, 0x20, 0x00, 0x23, 0x00, 0x21, 0x00, 0x23, 0x00, 0x22, 0x00, 0x23, 0x00, 0x23, 0x00, 0x23, 0x00, 0x24, 0x00, 0x23, 0x00, 0x25, 0x00, 0x23, 0x00, 0x26, 0x00, 0x23, 0x00, 0x27, 0x00, 0x23, 0x00, 0x28, 0x00, 0x23, 0x00, 0x29, 0x00, 0x23, 0x00, 0x2A, 0x00, 0x23, 0x00, 0x2B, 0x00, 0x23, 0x00, 0x2C, 0x00, 0x23, 0x00, 0x2D, 0x00, 0x23, 0x00, 0x2E, 0x00, 0x23, 0x00, 0x2F, 0x00, 0x23, 0x00, 0x30, 0x00, 0x23, 0x00, 0x31, 0x00, 0x23, 0x00, 0x32, 0x00, 0x23, 0x00, 0x33, 0x00, 0x23, 0x00, 0x34, 0x00, 0x23, 0x00, 0x35, 0x00, 0x23, 0x00, 0x36, 0x00, 0x23, 0x00, 0x37, 0x00, 0x23, 0x00, 0x38, 0x00, 0x23, 0x00, 0x39, 0x00, 0x23, 0x00, 0x3A, 0x00, 0x23, 0x00, 0x3B, 0x00, 0x23, 0x00, 0x3C, 0x00, 0x23, 0x00, 0x3D, 0x00, 0x23, 0x00, 0x3E, 0x00, 0x23, 0x00, 0x3F, 0x00, 0x23, 0x00, 0x40, 0x00, 0x23, 0x00, 0x41, 0x00, 0x23, 0x00, 0x42, 0x00, 0x23, 0x00, 0x43, 0x00, 0x23, 0x00, 0x44, 0x00, 0x23, 0x00, 0x45, 0x00, 0x23, 0x00, 0x46, 0x00, 0x23, 0x00, 0x47, 0x00, 0x23, 0x00, 0x48, 0x00, 0x23, 0x00, 0x49, 0x00, 0x23, 0x00, 0x4A, 0x00, 0x23, 0x00, 0x4B, 0x00, 0x23, 0x00, 0x4C, 0x00, 0x23, 0x00, 0x4D, 0x00, 0x23, 0x00, 0x4E, 0x00, 0x23, 0x00, 0x4F, 0x00, 0x23, 0x00, 0x50, 0x00, 0x23, 0x00, 0x51, 0x00, 0x23, 0x00, 0x52, 0x00, 0x23, 0x00, 0x53, 0x00, 0x23, 0x00, 0x54, 0x00, 0x23, 0x00, 0x55, 0x00, 0x23, 0x00, 0x56, 0x00, 0x23, 0x00, 0x57, 0x00, 0x23, 0x00, 0x58, 0x00, 0x23, 0x00, 0x59, 0x00, 0x23, 0x00, 0x5A, 0x00, 0x23, 0x00, 0x5B, 0x00, 0x23, 0x00, 0x5C, 0x00, 0x23, 0x00, 0x5D, 0x00, 0x23, 0x00, 0x5E, 0x00, 0x23, 0x00, 0x5F, 0x00, 0x23, 0x00, 0x60, 0x00, 0x23, 0x00, 0x61, 0x00, 0x23, 0x00, 0x62, 0x00, 0x23, 0x00, 0x63, 0x00, 0x23, 0x00, 0x64, 0x00, 0x23, 0x00, 0x65, 0x00, 0x23, 0x00, 0x66, 0x00, 0x23, 0x00, 0x67, 0x00, 0x23, 0x00, 0x68, 0x00, 0x23, 0x00, 0x69, 0x00, 0x23, 0x00, 0x6A, 0x00, 0x23, 0x00, 0x6B, 0x00, 0x23, 0x00, 0x6C, 0x00, 0x23, 0x00, 0x6D, 0x00, 0x23, 0x00, 0x6E, 0x00, 0x23, 0x00, 0x6F, 0x00, 0x23, 0x00, 0x70, 0x00, 0x23, 0x00, 0x71, 0x00, 0x23, 0x00, 0x72, 0x00, 0x23, 0x00, 0x73, 0x00, 0x23, 0x00, 0x74, 0x00, 0x23, 0x00, 0x75, 0x00, 0x23, 0x00, 0x76, 0x00, 0x23, 0x00, 0x77, 0x00, 0x23, 0x00, 0x78, 0x00, 0x23, 0x00, 0x79, 0x00, 0x23, 0x00, 0x7A, 0x00, 0x23, 0x00, 0x7B, 0x00, 0x23, 0x00, 0x7C, 0x00, 0x23, 0x00, 0x7D, 0x00, 0x23, 0x00, 0x7E, 0x00, 0x23, 0x00, 0x7F, 0x00, 0x23, 0x00, 0x80, 0x00, 0x23, 0x00, 0x81, 0x00, 0x23, 0x00, 0x82, 0x00, 0x23, 0x00, 0x83, 0x00, 0x23, 0x00, 0x84, 0x00, 0x23, 0x00, 0x85, 0x00, 0x23, 0x00, 0x86, 0x00, 0x23, 0x00, 0x87, 0x00, 0x23, 0x00, 0x88, 0x00, 0x23, 0x00, 0x89, 0x00, 0x23, 0x00, 0x8A, 0x00, 0x23, 0x00, 0x8B, 0x00, 0x23, 0x00, 0x8C, 0x00, 0x23, 0x00, 0x8D, 0x00, 0x23, 0x00, 0x8E, 0x00, 0x23, 0x00, 0x8F, 0x00, 0x23, 0x00, 0x90, 0x00, 0x23, 0x00, 0x91, 0x00, 0x23, 0x00, 0x92, 0x00, 0x23, 0x00, 0x93, 0x00, 0x23, 0x00, 0x94, 0x00, 0x23, 0x00, 0x95, 0x00, 0x23, 0x00, 0x96, 0x00, 0x23, 0x00, 0x97, 0x00, 0x23, 0x00, 0x98, 0x00, 0x23, 0x00, 0x99, 0x00, 0x23, 0x00, 0x9A, 0x00, 0x23, 0x00, 0x9B, 0x00, 0x23, 0x00, 0x9C, 0x00, 0x23, 0x00, 0x9D, 0x00, 0x23, 0x00, 0x9E, 0x00, 0x23, 0x00, 0x9F, 0x00, 0x23, 0x00, 0xA0, 0x00, 0x23, 0x00, 0xA1, 0x00, 0x23, 0x00, 0xA2, 0x00, 0x23, 0x00, 0xA3, 0x00, 0x23, 0x00, 0xA4, 0x00, 0x23, 0x00, 0xA5, 0x00, 0x23, 0x00, 0xA6, 0x00, 0x23, 0x00, 0xA7, 0x00, 0x23, 0x00, 0xA8, 0x00, 0x23, 0x00, 0xA9, 0x00, 0x23, 0x00, 0xAA, 0x00, 0x23, 0x00, 0xAB, 0x00, 0x23, 0x00, 0xAC, 0x00, 0x23, 0x00, 0xAD, 0x00, 0x23, 0x00, 0xAE, 0x00, 0x23, 0x00, 0xAF, 0x00, 0x23, 0x00, 0xB0, 0x00, 0x23, 0x00, 0xB1, 0x00, 0x23, 0x00, 0xB2, 0x00, 0x23, 0x00, 0xB3, 0x00, 0x23, 0x00, 0xB4, 0x00, 0x23, 0x00, 0xB5, 0x00, 0x23, 0x00, 0xB6, 0x00, 0x23, 0x00, 0xB7, 0x00, 0x23, 0x00, 0xB8, 0x00, 0x23, 0x00, 0xB9, 0x00, 0x23, 0x00, 0xBA, 0x00, 0x23, 0x00, 0xBB, 0x00, 0x23, 0x00, 0xBC, 0x00, 0x23, 0x00, 0xBD, 0x00, 0x23, 0x00, 0xBE, 0x00, 0x23, 0x00, 0xBF, 0x00, 0x23, 0x00, 0xC0, 0x00, 0x23, 0x00, 0xC1, 0x00, 0x23, 0x00, 0xC2, 0x00, 0x23, 0x00, 0xC3, 0x00, 0x23, 0x00, 0xC4, 0x00, 0x23, 0x00, 0xC5, 0x00, 0x23, 0x00, 0xC6, 0x00, 0x23, 0x00, 0xC7, 0x00, 0x23, 0x00, 0xC8, 0x00, 0x23, 0x00, 0xCA, 0x00, 0x23, 0x00, 0xCB, 0x00, 0x23, 0x00, 0xCC, 0x00, 0x23, 0x00, 0xCD, 0x00, 0x23, 0x00, 0xCE, 0x00, 0x23, 0x00, 0xCF, 0x00, 0x23, 0x00, 0xD0, 0x00, 0x23, 0x00, 0xD1, 0x00, 0x23, 0x00, 0xD2, 0x00, 0x23, 0x00, 0xD3, 0x00, 0x23, 0x00, 0xD4, 0x00, 0x23, 0x00, 0xD5, 0x00, 0x23, 0x00, 0xD6, 0x00, 0x23, 0x00, 0xD7, 0x00, 0x23, 0x00, 0xD8, 0x00, 0x23, 0x00, 0xD9, 0x00, 0x23, 0x00, 0xDA, 0x00, 0x23, 0x00, 0xDB, 0x00, 0x23, 0x00, 0xDC, 0x00, 0x23, 0x00, 0xDD, 0x00, 0x23, 0x00, 0xDE, 0x00, 0x23, 0x00, 0xDF, 0x00, 0x23, 0x00, 0xE0, 0x00, 0x23, 0x00, 0xE1, 0x00, 0x23, 0x00, 0xE2, 0x00, 0x23, 0x00, 0xE3, 0x00, 0x23, 0x00, 0xE4, 0x00, 0x23, 0x00, 0xE5, 0x00, 0x23, 0x00, 0xE6, 0x00, 0x23, 0x00, 0xE7, 0x00, 0x23, 0x00, 0xE8, 0x00, 0x23, 0x00, 0xE9, 0x00, 0x23, 0x00, 0xEA, 0x00, 0x23, 0x00, 0xEB, 0x00, 0x23, 0x00, 0xEC, 0x00, 0x23, 0x00, 0xED, 0x00, 0x23, 0x00, 0xEE, 0x00, 0x23, 0x00, 0xEF, 0x00, 0x23, 0x00, 0xF0, 0x00, 0x23, 0x00, 0xF1, 0x00, 0x23, 0x00, 0xF2, 0x00, 0x23, 0x00, 0xF3, 0x00, 0x23, 0x00, 0xF4, 0x00, 0x23, 0x00, 0xF5, 0x00, 0x23, 0x00, 0xF6, 0x00, 0x23, 0x00, 0xF7, 0x00, 0x23, 0x00, 0xF8, 0x00, 0x23, 0x00, 0xF9, 0x00, 0x23, 0x00, 0xFA, 0x00, 0x23, 0x00, 0xFB, 0x00, 0x23, 0x00, 0xFC, 0x00, 0x23, 0x00, 0xFD, 0x00, 0x23, 0x00, 0xFE, 0x00, 0x23, 0x00, 0xFF, 0x00, 0x23, 0x00, 0x00, 0x01, 0x23, 0x00, 0x01, 0x01, 0x23, 0x00, 0x02, 0x01, 0x23, 0x00, 0x03, 0x01, 0x23, 0x00, 0x04, 0x01, 0x23, 0x00, 0x05, 0x01, 0x23, 0x00, 0x06, 0x01, 0x23, 0x00, 0x07, 0x01, 0x23, 0x00, 0x08, 0x01, 0x23, 0x00, 0x09, 0x01, 0x23, 0x00, 0x0A, 0x01, 0x23, 0x00, 0x0B, 0x01, 0x23, 0x00, 0x0C, 0x01, 0x23, 0x00, 0x0D, 0x01, 0x23, 0x00, 0x0E, 0x01, 0x23, 0x00, 0x0F, 0x01, 0x23, 0x00, 0x10, 0x01, 0x23, 0x00, 0x11, 0x01, 0x23, 0x00, 0x12, 0x01, 0x23, 0x00, 0x13, 0x01, 0x23, 0x00, 0x14, 0x01, 0x23, 0x00, 0x15, 0x01, 0x23, 0x00, 0x16, 0x01, 0x23, 0x00, 0x17, 0x01, 0x23, 0x00, 0x18, 0x01, 0x23, 0x00, 0x19, 0x01, 0x23, 0x00, 0x1A, 0x01, 0x23, 0x00, 0x1B, 0x01, 0x23, 0x00, 0x1C, 0x01, 0x23, 0x00, 0x1D, 0x01, 0x23, 0x00, 0x1E, 0x01, 0x23, 0x00, 0x1F, 0x01, 0x23, 0x00, 0x20, 0x01, 0x23, 0x00, 0x21, 0x01, 0x23, 0x00, 0x22, 0x01, 0x23, 0x00, 0x23, 0x01, 0x23, 0x00, 0x24, 0x01, 0x23, 0x00, 0x25, 0x01, 0x23, 0x00, 0x26, 0x01, 0x23, 0x00, 0x27, 0x01, 0x23, 0x00, 0x28, 0x01, 0x23, 0x00, 0x29, 0x01, 0x23, 0x00, 0x2A, 0x01, 0x23, 0x00, 0x2B, 0x01, 0x23, 0x00, 0x2C, 0x01, 0x23, 0x00, 0x2D, 0x01, 0x23, 0x00, 0x2E, 0x01, 0x23, 0x00, 0x2F, 0x01, 0x23, 0x00, 0x30, 0x01, 0x23, 0x00, 0x31, 0x01, 0x23, 0x00, 0x32, 0x01, 0x23, 0x00, 0x33, 0x01, 0x23, 0x00, 0x34, 0x01, 0x23, 0x00, 0x35, 0x01, 0x23, 0x00, 0x36, 0x01, 0x23, 0x00, 0x37, 0x01, 0x23, 0x00, 0x38, 0x01, 0x23, 0x00, 0x39, 0x01, 0x23, 0x00, 0x3A, 0x01, 0x23, 0x00, 0x3B, 0x01, 0x23, 0x00, 0x3C, 0x01, 0x23, 0x00, 0x3D, 0x01, 0x23, 0x00, 0x3E, 0x01, 0x23, 0x00, 0x3F, 0x01, 0x23, 0x00, 0x40, 0x01, 0x23, 0x00, 0x41, 0x01, 0x23, 0x00, 0x42, 0x01, 0x23, 0x00, 0x43, 0x01, 0x23, 0x00, 0x44, 0x01, 0x23, 0x00, 0x45, 0x01, 0x23, 0x00, 0x46, 0x01, 0x23, 0x00, 0x47, 0x01, 0x23, 0x00, 0x48, 0x01, 0x23, 0x00, 0x49, 0x01, 0x23, 0x00, 0x4A, 0x01, 0x23, 0x00, 0x4B, 0x01, 0x23, 0x00, 0x4C, 0x01, 0x23, 0x00, 0x4D, 0x01, 0x23, 0x00, 0x4E, 0x01, 0x23, 0x00, 0x4F, 0x01, 0x23, 0x00, 0x50, 0x01, 0x23, 0x00, 0x51, 0x01, 0x23, 0x00, 0x52, 0x01, 0x23, 0x00, 0x53, 0x01, 0x23, 0x00, 0x54, 0x01, 0x23, 0x00, 0x55, 0x01, 0x23, 0x00, 0x56, 0x01, 0x23, 0x00, 0x57, 0x01, 0x23, 0x00, 0x58, 0x01, 0x23, 0x00, 0x59, 0x01, 0x23, 0x00, 0x5A, 0x01, 0x23, 0x00, 0x5B, 0x01, 0x23, 0x00, 0x5C, 0x01, 0x23, 0x00, 0x5D, 0x01, 0x23, 0x00, 0x5E, 0x01, 0x23, 0x00, 0x5F, 0x01, 0x23, 0x00, 0x60, 0x01, 0x23, 0x00, 0x61, 0x01, 0x23, 0x00, 0x62, 0x01, 0x23, 0x00, 0x63, 0x01, 0x23, 0x00, 0x64, 0x01, 0x23, 0x00, 0x65, 0x01, 0x23, 0x00, 0x66, 0x01, 0x23, 0x00, 0x67, 0x01, 0x23, 0x00, 0x68, 0x01, 0x23, 0x00, 0x69, 0x01, 0x23, 0x00, 0x6A, 0x01, 0x23, 0x00, 0x6B, 0x01, 0x23, 0x00, 0x6C, 0x01, 0x23, 0x00, 0x6D, 0x01, 0x23, 0x00, 0x6E, 0x01, 0x23, 0x00, 0x6F, 0x01, 0x23, 0x00, 0x70, 0x01, 0x23, 0x00, 0x71, 0x01, 0x23, 0x00, 0x72, 0x01, 0x23, 0x00, 0x73, 0x01, 0x23, 0x00, 0x74, 0x01, 0x23, 0x00, 0x75, 0x01, 0x23, 0x00, 0x76, 0x01, 0x23, 0x00, 0x77, 0x01, 0x23, 0x00, 0x78, 0x01, 0x23, 0x00, 0x79, 0x01, 0x23, 0x00, 0x7A, 0x01, 0x23, 0x00, 0x7B, 0x01, 0x23, 0x00, 0x7C, 0x01, 0x23, 0x00, 0x7D, 0x01, 0x23, 0x00, 0x7E, 0x01, 0x23, 0x00, 0x7F, 0x01, 0x23, 0x00, 0x80, 0x01, 0x23, 0x00, 0x81, 0x01, 0x23, 0x00, 0x82, 0x01, 0x23, 0x00, 0x83, 0x01, 0x23, 0x00, 0x84, 0x01, 0x23, 0x00, 0x85, 0x01, 0x23, 0x00, 0x86, 0x01, 0x23, 0x00, 0x87, 0x01, 0x23, 0x00, 0x88, 0x01, 0x23, 0x00, 0x89, 0x01, 0x23, 0x00, 0x8A, 0x01, 0x23, 0x00, 0x8B, 0x01, 0x23, 0x00, 0x8C, 0x01, 0x23, 0x00, 0x8D, 0x01, 0x23, 0x00, 0x8E, 0x01, 0x23, 0x00, 0x8F, 0x01, 0x23, 0x00, 0x90, 0x01, 0x23, 0x00, 0x92, 0x01, 0x23, 0x00, 0x93, 0x01, 0x23, 0x00, 0x94, 0x01, 0x23, 0x00, 0x95, 0x01, 0x23, 0x00, 0x96, 0x01, 0x23, 0x00, 0x97, 0x01, 0x23, 0x00, 0x98, 0x01, 0x23, 0x00, 0x99, 0x01, 0x23, 0x00, 0x9A, 0x01, 0x23, 0x00, 0x9B, 0x01, 0x23, 0x00, 0x9C, 0x01, 0x23, 0x00, 0x9D, 0x01, 0x23, 0x00, 0x9E, 0x01, 0x23, 0x00, 0x9F, 0x01, 0x23, 0x00, 0xA0, 0x01, 0x23, 0x00, 0xA1, 0x01, 0x23, 0x00, 0xA2, 0x01, 0x23, 0x00, 0xA3, 0x01, 0x23, 0x00, 0xA4, 0x01, 0x23, 0x00, 0xA5, 0x01, 0x23, 0x00, 0xA6, 0x01, 0x23, 0x00, 0xA7, 0x01, 0x23, 0x00, 0xA8, 0x01, 0x23, 0x00, 0xA9, 0x01, 0x23, 0x00, 0xAA, 0x01, 0x23, 0x00, 0xAB, 0x01, 0x23, 0x00, 0xAC, 0x01, 0x23, 0x00, 0xAD, 0x01, 0x23, 0x00, 0xAE, 0x01, 0x23, 0x00, 0xAF, 0x01, 0x23, 0x00, 0xB0, 0x01, 0x23, 0x00, 0xB1, 0x01, 0x23, 0x00, 0xB2, 0x01, 0x23, 0x00, 0xB3, 0x01, 0x23, 0x00, 0xB4, 0x01, 0x23, 0x00, 0xB5, 0x01, 0x23, 0x00, 0xB6, 0x01, 0x23, 0x00, 0xB7, 0x01, 0x23, 0x00, 0xB8, 0x01, 0x23, 0x00, 0xB9, 0x01, 0x23, 0x00, 0xBA, 0x01, 0x23, 0x00, 0xBB, 0x01, 0x23, 0x00, 0xBC, 0x01, 0x23, 0x00, 0xBD, 0x01, 0x23, 0x00, 0xBE, 0x01, 0x23, 0x00, 0xBF, 0x01, 0x23, 0x00, 0xC0, 0x01, 0x23, 0x00, 0xC1, 0x01, 0x23, 0x00, 0xC2, 0x01, 0x23, 0x00, 0xC3, 0x01, 0x23, 0x00, 0xC4, 0x01, 0x23, 0x00, 0xC5, 0x01, 0x23, 0x00, 0xC6, 0x01, 0x23, 0x00, 0xC7, 0x01, 0x23, 0x00, 0xC8, 0x01, 0x23, 0x00, 0xC9, 0x01, 0x23, 0x00, 0xCA, 0x01, 0x23, 0x00, 0xCB, 0x01, 0x23, 0x00, 0xCC, 0x01, 0x23, 0x00, 0xCD, 0x01, 0x23, 0x00, 0xCE, 0x01, 0x23, 0x00, 0xCF, 0x01, 0x23, 0x00, 0xD0, 0x01, 0x23, 0x00, 0xD1, 0x01, 0x23, 0x00, 0xD2, 0x01, 0x23, 0x00, 0xD3, 0x01, 0x23, 0x00, 0xD4, 0x01, 0x23, 0x00, 0xD5, 0x01, 0x23, 0x00, 0xD6, 0x01, 0x23, 0x00, 0xD7, 0x01, 0x23, 0x00, 0xD8, 0x01, 0x23, 0x00, 0xD9, 0x01, 0x23, 0x00, 0xDA, 0x01, 0x23, 0x00, 0xDB, 0x01, 0x23, 0x00, 0xDC, 0x01, 0x23, 0x00, 0xDD, 0x01, 0x23, 0x00, 0xDE, 0x01, 0x23, 0x00, 0xDF, 0x01, 0x23, 0x00, 0xE0, 0x01, 0x23, 0x00, 0xE1, 0x01, 0x23, 0x00, 0xE2, 0x01, 0x23, 0x00, 0xE3, 0x01, 0x23, 0x00, 0xE4, 0x01, 0x23, 0x00, 0xE5, 0x01, 0x23, 0x00, 0xE6, 0x01, 0x23, 0x00, 0xE7, 0x01, 0x23, 0x00, 0xE8, 0x01, 0x23, 0x00, 0xE9, 0x01, 0x23, 0x00, 0xEA, 0x01, 0x23, 0x00, 0xEB, 0x01, 0x23, 0x00, 0xEC, 0x01, 0x23, 0x00, 0xED, 0x01, 0x23, 0x00, 0xEE, 0x01, 0x23, 0x00, 0xEF, 0x01, 0x23, 0x00, 0xF0, 0x01, 0x23, 0x00, 0xF1, 0x01, 0x23, 0x00, 0xF2, 0x01, 0x23, 0x00, 0xF3, 0x01, 0x23, 0x00, 0xF4, 0x01, 0x23, 0x00, 0xF5, 0x01, 0x23, 0x00, 0xF6, 0x01, 0x23, 0x00, 0xF7, 0x01, 0x23, 0x00, 0xF8, 0x01, 0x23, 0x00, 0xF9, 0x01, 0x23, 0x00, 0xFA, 0x01, 0x23, 0x00, 0xFB, 0x01, 0x23, 0x00, 0xFC, 0x01, 0x23, 0x00, 0xFD, 0x01, 0x23, 0x00, 0xFE, 0x01, 0x23, 0x00, 0xFF, 0x01, 0x23, 0x00, 0x00, 0x02, 0x23, 0x00, 0x01, 0x02, 0x23, 0x00, 0x02, 0x02, 0x23, 0x00, 0x03, 0x02, 0x23, 0x00, 0x04, 0x02, 0x23, 0x00, 0x05, 0x02, 0x23, 0x00, 0x06, 0x02, 0x23, 0x00, 0x07, 0x02, 0x23, 0x00, 0x08, 0x02, 0x23, 0x00, 0x09, 0x02, 0x23, 0x00, 0x0A, 0x02, 0x23, 0x00, 0x0B, 0x02, 0x23, 0x00, 0x0C, 0x02, 0x23, 0x00, 0x0D, 0x02, 0x23, 0x00, 0x0E, 0x02, 0x23, 0x00, 0x0F, 0x02, 0x23, 0x00, 0x10, 0x02, 0x23, 0x00, 0x11, 0x02, 0x23, 0x00, 0x12, 0x02, 0x23, 0x00, 0x13, 0x02, 0x23, 0x00, 0x14, 0x02, 0x23, 0x00, 0x15, 0x02, 0x23, 0x00, 0x16, 0x02, 0x23, 0x00, 0x17, 0x02, 0x23, 0x00, 0x18, 0x02, 0x23, 0x00, 0x19, 0x02, 0x23, 0x00, 0x1A, 0x02, 0x23, 0x00, 0x1B, 0x02, 0x23, 0x00, 0x1C, 0x02, 0x23, 0x00, 0x1D, 0x02, 0x23, 0x00, 0x1E, 0x02, 0x23, 0x00, 0x1F, 0x02, 0x23, 0x00, 0x20, 0x02, 0x23, 0x00, 0x21, 0x02, 0x23, 0x00, 0x22, 0x02, 0x23, 0x00, 0x23, 0x02, 0x23, 0x00, 0x24, 0x02, 0x23, 0x00, 0x25, 0x02, 0x23, 0x00, 0x26, 0x02, 0x23, 0x00, 0x27, 0x02, 0x23, 0x00, 0x28, 0x02, 0x23, 0x00, 0x29, 0x02, 0x23, 0x00, 0x2A, 0x02, 0x23, 0x00, 0x2B, 0x02, 0x23, 0x00, 0x2C, 0x02, 0x23, 0x00, 0x2D, 0x02, 0x23, 0x00, 0x2E, 0x02, 0x23, 0x00, 0x2F, 0x02, 0x23, 0x00, 0x30, 0x02, 0x23, 0x00, 0x31, 0x02, 0x23, 0x00, 0x32, 0x02, 0x23, 0x00, 0x33, 0x02, 0x23, 0x00, 0x34, 0x02, 0x23, 0x00, 0x35, 0x02, 0x23, 0x00, 0x36, 0x02, 0x23, 0x00, 0x37, 0x02, 0x23, 0x00, 0x38, 0x02, 0x23, 0x00, 0x39, 0x02, 0x23, 0x00, 0x3A, 0x02, 0x23, 0x00, 0x3B, 0x02, 0x23, 0x00, 0x3C, 0x02, 0x23, 0x00, 0x3D, 0x02, 0x23, 0x00, 0x3E, 0x02, 0x23, 0x00, 0x3F, 0x02, 0x23, 0x00, 0x40, 0x02, 0x23, 0x00, 0x41, 0x02, 0x23, 0x00, 0x42, 0x02, 0x23, 0x00, 0x43, 0x02, 0x23, 0x00, 0x44, 0x02, 0x23, 0x00, 0x45, 0x02, 0x23, 0x00, 0x46, 0x02, 0x23, 0x00, 0x47, 0x02, 0x23, 0x00, 0x48, 0x02, 0x23, 0x00, 0x49, 0x02, 0x23, 0x00, 0x4A, 0x02, 0x23, 0x00, 0x4B, 0x02, 0x23, 0x00, 0x4C, 0x02, 0x23, 0x00, 0x4D, 0x02, 0x23, 0x00, 0x4E, 0x02, 0x23, 0x00, 0x4F, 0x02, 0x23, 0x00, 0x50, 0x02, 0x23, 0x00, 0x51, 0x02, 0x23, 0x00, 0x52, 0x02, 0x23, 0x00, 0x53, 0x02, 0x23, 0x00, 0x54, 0x02, 0x23, 0x00, 0x55, 0x02, 0x23, 0x00, 0x56, 0x02, 0x23, 0x00, 0x57, 0x02, 0x23, 0x00, 0x58, 0x02, 0x23, 0x00, 0x59, 0x02, 0x23, 0x00, 0x5A, 0x02, 0x23, 0x00, 0x5B, 0x02, 0x23, 0x00, 0x5C, 0x02, 0x23, 0x00, 0x5D, 0x02, 0x23, 0x00, 0x5E, 0x02, 0x23, 0x00, 0x5F, 0x02, 0x23, 0x00, 0x60, 0x02, 0x23, 0x00, 0x61, 0x02, 0x23, 0x00, 0x62, 0x02, 0x23, 0x00, 0x63, 0x02, 0x23, 0x00, 0x64, 0x02, 0x23, 0x00, 0x65, 0x02, 0x23, 0x00, 0x66, 0x02, 0x23, 0x00, 0x67, 0x02, 0x23, 0x00, 0x68, 0x02, 0x23, 0x00, 0x69, 0x02, 0x23, 0x00, 0x6A, 0x02, 0x23, 0x00, 0x6B, 0x02, 0x23, 0x00, 0x6C, 0x02, 0x23, 0x00, 0x6D, 0x02, 0x23, 0x00, 0x6E, 0x02, 0x23, 0x00, 0x6F, 0x02, 0x23, 0x00, 0x70, 0x02, 0x23, 0x00, 0x71, 0x02, 0x23, 0x00, 0x72, 0x02, 0x23, 0x00, 0x73, 0x02, 0x23, 0x00, 0x74, 0x02, 0x23, 0x00, 0x75, 0x02, 0x23, 0x00, 0x76, 0x02, 0x23, 0x00, 0x77, 0x02, 0x23, 0x00, 0x78, 0x02, 0x23, 0x00, 0x79, 0x02, 0x23, 0x00, 0x7A, 0x02, 0x23, 0x00, 0x7B, 0x02, 0x23, 0x00, 0x7C, 0x02, 0x23, 0x00, 0x7D, 0x02, 0x23, 0x00, 0x7E, 0x02, 0x23, 0x00, 0x7F, 0x02, 0x23, 0x00, 0x80, 0x02, 0x23, 0x00, 0x81, 0x02, 0x23, 0x00, 0x82, 0x02, 0x23, 0x00, 0x83, 0x02, 0x23, 0x00, 0x84, 0x02, 0x23, 0x00, 0x85, 0x02, 0x23, 0x00, 0x86, 0x02, 0x23, 0x00, 0x87, 0x02, 0x23, 0x00, 0x88, 0x02, 0x23, 0x00, 0x89, 0x02, 0x23, 0x00, 0x8A, 0x02, 0x23, 0x00, 0x8B, 0x02, 0x23, 0x00, 0x8C, 0x02, 0x23, 0x00, 0x8D, 0x02, 0x23, 0x00, 0x8E, 0x02, 0x23, 0x00, 0x8F, 0x02, 0x23, 0x00, 0x90, 0x02, 0x23, 0x00, 0x91, 0x02, 0x23, 0x00, 0x92, 0x02, 0x23, 0x00, 0x93, 0x02, 0x23, 0x00, 0x94, 0x02, 0x23, 0x00, 0x95, 0x02, 0x23, 0x00, 0x96, 0x02, 0x23, 0x00, 0x97, 0x02, 0x23, 0x00, 0x98, 0x02, 0x23, 0x00, 0x99, 0x02, 0x23, 0x00, 0x9A, 0x02, 0x23, 0x00, 0x9B, 0x02, 0x23, 0x00, 0x9C, 0x02, 0x23, 0x00, 0x9D, 0x02, 0x23, 0x00, 0x9E, 0x02, 0x23, 0x00, 0x9F, 0x02, 0x23, 0x00, 0xA0, 0x02, 0x23, 0x00, 0xA1, 0x02, 0x23, 0x00, 0xA2, 0x02, 0x23, 0x00, 0xA3, 0x02, 0x23, 0x00, 0xA4, 0x02, 0x23, 0x00, 0xA5, 0x02, 0x23, 0x00, 0xA6, 0x02, 0x23, 0x00, 0xA7, 0x02, 0x23, 0x00, 0xA8, 0x02, 0x23, 0x00, 0xA9, 0x02, 0x23, 0x00, 0xAA, 0x02, 0x23, 0x00, 0xAB, 0x02, 0x23, 0x00, 0xAC, 0x02, 0x23, 0x00, 0xAD, 0x02, 0x23, 0x00, 0xAE, 0x02, 0x23, 0x00, 0xAF, 0x02, 0x23, 0x00, 0xB0, 0x02, 0x23, 0x00, 0xB1, 0x02, 0x23, 0x00, 0xB2, 0x02, 0x23, 0x00, 0xB3, 0x02, 0x23, 0x00, 0xB4, 0x02, 0x23, 0x00, 0xB5, 0x02, 0x23, 0x00, 0xB6, 0x02, 0x23, 0x00, 0xB7, 0x02, 0x23, 0x00, 0xB8, 0x02, 0x23, 0x00, 0xB9, 0x02, 0x23, 0x00, 0xBA, 0x02, 0x23, 0x00, 0xBB, 0x02, 0x23, 0x00, 0xBC, 0x02, 0x23, 0x00, 0xBD, 0x02, 0x23, 0x00, 0xBE, 0x02, 0x23, 0x00, 0xBF, 0x02, 0x23, 0x00, 0xC0, 0x02, 0x23, 0x00, 0xC1, 0x02, 0x23, 0x00, 0xC2, 0x02, 0x23, 0x00, 0xC3, 0x02, 0x23, 0x00, 0xC4, 0x02, 0x23, 0x00, 0xC5, 0x02, 0x23, 0x00, 0xC6, 0x02, 0x23, 0x00, 0xC7, 0x02, 0x23, 0x00, 0xC8, 0x02, 0x23, 0x00, 0xC9, 0x02, 0x23, 0x00, 0xCA, 0x02, 0x23, 0x00, 0xCB, 0x02, 0x23, 0x00, 0xCC, 0x02, 0x23, 0x00, 0xCD, 0x02, 0x23, 0x00, 0xCE, 0x02, 0x23, 0x00, 0xCF, 0x02, 0x23, 0x00, 0xD0, 0x02, 0x23, 0x00, 0xD1, 0x02, 0x23, 0x00, 0xD2, 0x02, 0x23, 0x00, 0xD3, 0x02, 0x23, 0x00, 0xD4, 0x02, 0x23, 0x00, 0xD5, 0x02, 0x23, 0x00, 0xD6, 0x02, 0x23, 0x00, 0xD7, 0x02, 0x23, 0x00, 0xD8, 0x02, 0x23, 0x00, 0xD9, 0x02, 0x23, 0x00, 0xDA, 0x02, 0x23, 0x00, 0xDB, 0x02, 0x23, 0x00, 0xDC, 0x02, 0x23, 0x00, 0xDD, 0x02, 0x23, 0x00, 0xDE, 0x02, 0x23, 0x00, 0xDF, 0x02, 0x23, 0x00, 0xE0, 0x02, 0x23, 0x00, 0xE1, 0x02, 0x23, 0x00, 0xE2, 0x02, 0x23, 0x00, 0xE3, 0x02, 0x23, 0x00, 0xE4, 0x02, 0x23, 0x00, 0xE5, 0x02, 0x23, 0x00, 0xE6, 0x02, 0x23, 0x00, 0xE7, 0x02, 0x23, 0x00, 0xE8, 0x02, 0x23, 0x00, 0xE9, 0x02, 0x23, 0x00, 0xEA, 0x02, 0x23, 0x00, 0xEB, 0x02, 0x23, 0x00, 0xEC, 0x02, 0x23, 0x00, 0xED, 0x02, 0x23, 0x00, 0xEE, 0x02, 0x23, 0x00, 0xEF, 0x02, 0x23, 0x00, 0xF0, 0x02, 0x23, 0x00, 0xF1, 0x02, 0x23, 0x00, 0xF2, 0x02, 0x23, 0x00, 0xF3, 0x02, 0x23, 0x00, 0xF4, 0x02, 0x23, 0x00, 0xF5, 0x02, 0x23, 0x00, 0xF6, 0x02, 0x23, 0x00, 0xF7, 0x02, 0x23, 0x00, 0xF8, 0x02, 0x23, 0x00, 0xF9, 0x02, 0x23, 0x00, 0xFA, 0x02, 0x23, 0x00, 0xFB, 0x02, 0x23, 0x00, 0xFC, 0x02, 0x23, 0x00, 0xFD, 0x02, 0x23, 0x00, 0xFE, 0x02, 0x23, 0x00, 0xFF, 0x02, 0x23, 0x00, 0x00, 0x03, 0x23, 0x00, 0x01, 0x03, 0x23, 0x00, 0x02, 0x03, 0x23, 0x00, 0x03, 0x03, 0x23, 0x00, 0x04, 0x03, 0x23, 0x00, 0x05, 0x03, 0x23, 0x00, 0x06, 0x03, 0x23, 0x00, 0x07, 0x03, 0x23, 0x00, 0x08, 0x03, 0x23, 0x00, 0x09, 0x03, 0x23, 0x00, 0x0A, 0x03, 0x23, 0x00, 0x0B, 0x03, 0x23, 0x00, 0x0C, 0x03, 0x23, 0x00, 0x0D, 0x03, 0x23, 0x00, 0x0E, 0x03, 0x23, 0x00, 0x0F, 0x03, 0x23, 0x00, 0x10, 0x03, 0x23, 0x00, 0x11, 0x03, 0x23, 0x00, 0x12, 0x03, 0x23, 0x00, 0x13, 0x03, 0x23, 0x00, 0x14, 0x03, 0x23, 0x00, 0x15, 0x03, 0x23, 0x00, 0x16, 0x03, 0x23, 0x00, 0x17, 0x03, 0x23, 0x00, 0x18, 0x03, 0x23, 0x00, 0x19, 0x03, 0x23, 0x00, 0x1A, 0x03, 0x23, 0x00, 0x1B, 0x03, 0x23, 0x00, 0x1C, 0x03, 0x23, 0x00, 0x1D, 0x03, 0x23, 0x00, 0x1E, 0x03, 0x23, 0x00, 0x1F, 0x03, 0x23, 0x00, 0x20, 0x03, 0x23, 0x00, 0x21, 0x03, 0x23, 0x00, 0x22, 0x03, 0x23, 0x00, 0x23, 0x03, 0x23, 0x00, 0x24, 0x03, 0x23, 0x00, 0x25, 0x03, 0x23, 0x00, 0x26, 0x03, 0x23, 0x00, 0x27, 0x03, 0x23, 0x00, 0x28, 0x03, 0x23, 0x00, 0x29, 0x03, 0x23, 0x00, 0x2A, 0x03, 0x23, 0x00, 0x2B, 0x03, 0x23, 0x00, 0x2C, 0x03, 0x23, 0x00, 0x2D, 0x03, 0x23, 0x00, 0x2E, 0x03, 0x23, 0x00, 0x2F, 0x03, 0x23, 0x00, 0x30, 0x03, 0x23, 0x00, 0x31, 0x03, 0x23, 0x00, 0x32, 0x03, 0x23, 0x00, 0x33, 0x03, 0x23, 0x00, 0x34, 0x03, 0x23, 0x00, 0x35, 0x03, 0x23, 0x00, 0x36, 0x03, 0x23, 0x00, 0x37, 0x03, 0x23, 0x00, 0x38, 0x03, 0x23, 0x00, 0x39, 0x03, 0x23, 0x00, 0x3A, 0x03, 0x23, 0x00, 0x3B, 0x03, 0x23, 0x00, 0x3C, 0x03, 0x23, 0x00, 0x3D, 0x03, 0x23, 0x00, 0x3E, 0x03, 0x23, 0x00, 0x3F, 0x03, 0x23, 0x00, 0x40, 0x03, 0x23, 0x00, 0x41, 0x03, 0x23, 0x00, 0x42, 0x03, 0x23, 0x00, 0x43, 0x03, 0x23, 0x00, 0x44, 0x03, 0x23, 0x00, 0x45, 0x03, 0x23, 0x00, 0x46, 0x03, 0x23, 0x00, 0x47, 0x03, 0x23, 0x00, 0x48, 0x03, 0x23, 0x00, 0x49, 0x03, 0x23, 0x00, 0x4A, 0x03, 0x23, 0x00, 0x4B, 0x03, 0x23, 0x00, 0x4C, 0x03, 0x23, 0x00, 0x4D, 0x03, 0x23, 0x00, 0x4E, 0x03, 0x23, 0x00, 0x4F, 0x03, 0x23, 0x00, 0x50, 0x03, 0x23, 0x00, 0x51, 0x03, 0x23, 0x00, 0x52, 0x03, 0x23, 0x00, 0x53, 0x03, 0x23, 0x00, 0x54, 0x03, 0x23, 0x00, 0x55, 0x03, 0x23, 0x00, 0x56, 0x03, 0x23, 0x00, 0x57, 0x03, 0x23, 0x00, 0x58, 0x03, 0x23, 0x00, 0x59, 0x03, 0x23, 0x00, 0x5A, 0x03, 0x23, 0x00, 0x5B, 0x03, 0x23, 0x00, 0x5C, 0x03, 0x23, 0x00, 0x5D, 0x03, 0x23, 0x00, 0x5E, 0x03, 0x23, 0x00, 0x5F, 0x03, 0x23, 0x00, 0x60, 0x03, 0x23, 0x00, 0x61, 0x03, 0x23, 0x00, 0x62, 0x03, 0x23, 0x00, 0x63, 0x03, 0x23, 0x00, 0x64, 0x03, 0x23, 0x00, 0x65, 0x03, 0x23, 0x00, 0x66, 0x03, 0x23, 0x00, 0x67, 0x03, 0x23, 0x00, 0x68, 0x03, 0x23, 0x00, 0x69, 0x03, 0x23, 0x00, 0x6A, 0x03, 0x23, 0x00, 0x6B, 0x03, 0x23, 0x00, 0x6C, 0x03, 0x23, 0x00, 0x6D, 0x03, 0x23, 0x00, 0x6E, 0x03, 0x23, 0x00, 0x6F, 0x03, 0x23, 0x00, 0x70, 0x03, 0x23, 0x00, 0x71, 0x03, 0x23, 0x00, 0x72, 0x03, 0x23, 0x00, 0x73, 0x03, 0x23, 0x00, 0x74, 0x03, 0x23, 0x00, 0x75, 0x03, 0x23, 0x00, 0x76, 0x03, 0x23, 0x00, 0x77, 0x03, 0x23, 0x00, 0x78, 0x03, 0x23, 0x00, 0x79, 0x03, 0x23, 0x00, 0x7A, 0x03, 0x23, 0x00, 0x7B, 0x03, 0x23, 0x00, 0x7C, 0x03, 0x23, 0x00, 0x7D, 0x03, 0x23, 0x00, 0x7E, 0x03, 0x23, 0x00, 0x7F, 0x03, 0x23, 0x00, 0x80, 0x03, 0x23, 0x00, 0x81, 0x03, 0x23, 0x00, 0x82, 0x03, 0x23, 0x00, 0x83, 0x03, 0x23, 0x00, 0x84, 0x03, 0x23, 0x00, 0x85, 0x03, 0x23, 0x00, 0x86, 0x03, 0x23, 0x00, 0x87, 0x03, 0x23, 0x00, 0x88, 0x03, 0x23, 0x00, 0x89, 0x03, 0x23, 0x00, 0x8A, 0x03, 0x23, 0x00, 0x8B, 0x03, 0x23, 0x00, 0x8C, 0x03, 0x23, 0x00, 0x8D, 0x03, 0x23, 0x00, 0x8E, 0x03, 0x23, 0x00, 0x8F, 0x03, 0x23, 0x00, 0x90, 0x03, 0x23, 0x00, 0x91, 0x03, 0x23, 0x00, 0x92, 0x03, 0x23, 0x00, 0x93, 0x03, 0x23, 0x00, 0x94, 0x03, 0x23, 0x00, 0x95, 0x03, 0x23, 0x00, 0x96, 0x03, 0x23, 0x00, 0x97, 0x03, 0x23, 0x00, 0x98, 0x03, 0x23, 0x00, 0x99, 0x03, 0x23, 0x00, 0x9A, 0x03, 0x23, 0x00, 0x9B, 0x03, 0x23, 0x00, 0x9C, 0x03, 0x23, 0x00, 0x9D, 0x03, 0x23, 0x00, 0x9E, 0x03, 0x23, 0x00, 0x9F, 0x03, 0x23, 0x00, 0xA0, 0x03, 0x23, 0x00, 0xA1, 0x03, 0x23, 0x00, 0xA2, 0x03, 0x23, 0x00, 0xA3, 0x03, 0x23, 0x00, 0xA4, 0x03, 0x23, 0x00, 0xA5, 0x03, 0x23, 0x00, 0xA6, 0x03, 0x23, 0x00, 0xA7, 0x03, 0x23, 0x00, 0xA8, 0x03, 0x23, 0x00, 0xA9, 0x03, 0x23, 0x00, 0xAA, 0x03, 0x23, 0x00, 0xAB, 0x03, 0x23, 0x00, 0xAC, 0x03, 0x23, 0x00, 0xAD, 0x03, 0x23, 0x00, 0xAE, 0x03, 0x23, 0x00, 0xAF, 0x03, 0x23, 0x00, 0xB0, 0x03, 0x23, 0x00, 0xB1, 0x03, 0x23, 0x00, 0xB2, 0x03, 0x23, 0x00, 0xB3, 0x03, 0x23, 0x00, 0xB4, 0x03, 0x23, 0x00, 0xB5, 0x03, 0x23, 0x00, 0xB6, 0x03, 0x23, 0x00, 0xB7, 0x03, 0x23, 0x00, 0xB8, 0x03, 0x23, 0x00, 0xB9, 0x03, 0x23, 0x00, 0xBA, 0x03, 0x23, 0x00, 0xBB, 0x03, 0x23, 0x00, 0xBC, 0x03, 0x23, 0x00, 0xBD, 0x03, 0x23, 0x00, 0xBE, 0x03, 0x23, 0x00, 0xBF, 0x03, 0x23, 0x00, 0xC0, 0x03, 0x23, 0x00, 0xC1, 0x03, 0x23, 0x00, 0xC2, 0x03, 0x23, 0x00, 0xC3, 0x03, 0x23, 0x00, 0xC4, 0x03, 0x23, 0x00, 0xC5, 0x03, 0x23, 0x00, 0xC6, 0x03, 0x23, 0x00, 0xC7, 0x03, 0x23, 0x00, 0xC8, 0x03, 0x23, 0x00, 0xC9, 0x03, 0x23, 0x00, 0xCA, 0x03, 0x23, 0x00, 0xCB, 0x03, 0x23, 0x00, 0xCC, 0x03, 0x23, 0x00, 0xCD, 0x03, 0x23, 0x00, 0xCE, 0x03, 0x23, 0x00, 0xCF, 0x03, 0x23, 0x00, 0xD0, 0x03, 0x23, 0x00, 0xD1, 0x03, 0x23, 0x00, 0xD2, 0x03, 0x23, 0x00, 0xD3, 0x03, 0x23, 0x00, 0xD4, 0x03, 0x23, 0x00, 0xD5, 0x03, 0x23, 0x00, 0xD6, 0x03, 0x23, 0x00, 0xD7, 0x03, 0x23, 0x00, 0xD8, 0x03, 0x23, 0x00, 0xD9, 0x03, 0x23, 0x00, 0xDA, 0x03, 0x23, 0x00, 0xDB, 0x03, 0x23, 0x00, 0xDC, 0x03, 0x23, 0x00, 0xDD, 0x03, 0x23, 0x00, 0xDE, 0x03, 0x23, 0x00, 0xDF, 0x03, 0x23, 0x00, 0xE0, 0x03, 0x23, 0x00, 0xE1, 0x03, 0x23, 0x00, 0xE2, 0x03, 0x23, 0x00, 0xE3, 0x03, 0x23, 0x00, 0xE4, 0x03, 0x23, 0x00, 0xE5, 0x03, 0x23, 0x00, 0xE6, 0x03, 0x23, 0x00, 0xE7, 0x03, 0xBF, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xBF, 0x00, 0x2F, 0x02, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2F, 0x00, 0x09, 0x00, 0x15, 0x41, 0x08, 0x00, 0x02, 0x00, 0x11, 0x00, 0x01, 0x00, 0x09, 0x00, 0x15, 0x41, 0x08, 0x00, 0x03, 0x00, 0x11, 0x00, 0x01, 0x00, 0x11, 0x00, 0x06, 0x00, 0x1F, 0x00, 0xFF, 0x1A, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x74, 0x00, 0x3D, 0x00, 0x00, 0x04, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3E, 0x00, 0x1E, 0x00, 0x33, 0x00, 0x00, 0x00, 0x09, 0x00, 0x15, 0x41, 0x08, 0x00, 0x04, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x14, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x74, 0x00, 0x3D, 0x00, 0x00, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3E, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0xCB, 0x00, 0x10, 0x80, 0x05, 0x00, 0x19, 0x00, 0x10, 0x80, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1A, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x74, 0x00, 0x3D, 0x00, 0x00, 0x04, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3E, 0x00, 0x1E, 0x00, 0xB4, 0x00, 0x00, 0x00, 0x19, 0x00, 0x10, 0x80, 0x01, 0x00, 0x1F, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1A, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x74, 0x00, 0x3D, 0x00, 0x00, 0x04, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3E, 0x00, 0x1E, 0x00, 0x87, 0x00, 0x00, 0x00, 0x19, 0x00, 0x10, 0x80, 0x02, 0x00, 0x1F, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1A, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x74, 0x00, 0x3D, 0x00, 0x00, 0x04, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3E, 0x00, 0x1E, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x19, 0x00, 0x10, 0x80, 0x03, 0x00, 0x1F, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1A, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x74, 0x00, 0x3D, 0x00, 0x00, 0x04, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3E, 0x00, 0x1E, 0x00, 0x2D, 0x00, 0x00, 0x00, 0x19, 0x00, 0x10, 0x80, 0x04, 0x00, 0x1F, 0x00, 0x01, 0x06, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x1A, 0x00, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x74, 0x00, 0x3D, 0x00, 0x00, 0x04, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3E, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x27, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x28, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0x4C, 0x00, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x29, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x2A, 0x00, 0x02, 0x3F, 0x00, 0xA4, 0x01, 0xA7, 0x01, 0x4B, 0x01, 0x51, 0x01, 0x00, 0x00, 0x01, 0x00, 0x4A, 0x01, 0xA3, 0x01, 0xA7, 0x01, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x2B, 0x00, 0x02, 0x3F, 0x00, 0xA4, 0x01, 0xA7, 0x01, 0x4B, 0x01, 0x51, 0x01, 0x01, 0x00, 0x01, 0x00, 0x4A, 0x01, 0xA3, 0x01, 0xA7, 0x01, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x2C, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x2D, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x2E, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x2F, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0xA6, 0x00, 0x47, 0x05, 0x38, 0x00, 0x30, 0x00, 0x02, 0x32, 0x00, 0x3F, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x01, 0x00, 0x3D, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x47, 0x00, 0x01, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x48, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x47, 0x00, 0x01, 0x00, 0x0D, 0x00, 0x01, 0x00, 0x48, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x21, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x22, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x23, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x4B, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x9F, 0x00, 0x01, 0x00, 0xFE, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x4C, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0xE3, 0xFF, 0xFF, 0xFF, 0x65, 0x00, 0x4F, 0x02, 0x00, 0x00, 0x09, 0x00, 0x08, 0x00, 0x01, 0x00, 0x08, 0x00, 0x01, 0x00, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x1A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x4F, 0x02, 0xFF, 0x00, 0x05, 0x00, 0x06, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4F, 0x02, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x64, 0x00, 0x00, 0x00, 0x79, 0xFF, 0xFF, 0xFF, 0x64, 0x00, 0xFF, 0x00, 0x71, 0xFF, 0xFF, 0xFF, 0x65, 0x00, 0xA6, 0x00, 0x59, 0x05, 0x69, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xFB, 0x00, 0x68, 0x00, 0x00, 0x00, 0xA8, 0x00, 0x98, 0x00, 0x42, 0x04, 0x4F, 0x02, 0xFB, 0x00, 0x05, 0x00, 0x08, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x1B, 0x00, 0xFB, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x1C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x64, 0x00, 0xFB, 0x00, 0x43, 0xFF, 0xFF, 0xFF, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x1D, 0x00, 0xFB, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x4F, 0x02, 0xFB, 0x00, 0x05, 0x00, 0x07, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x1E, 0x00, 0xFB, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3F, 0x00, 0xA9, 0x00, 0x17, 0x05, 0x4C, 0x00, 0x00, 0x34, 0x00, 0x1F, 0x00, 0x02, 0x00, 0xAA, 0x00, 0x4B, 0x00, 0x3F, 0x00, 0xC6, 0x01, 0x64, 0x00, 0xFB, 0x00, 0x0E, 0x05, 0x00, 0x00, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x20, 0x00, 0xFB, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x22, 0x00, 0xFB, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x23, 0x00, 0xFB, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x4F, 0x02, 0xFB, 0x00, 0x05, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x65, 0x00, 0xA6, 0x00, 0x59, 0x05, 0x6C, 0x00, 0xFB, 0x00, 0xA8, 0x00, 0x9E, 0x00, 0x64, 0x00, 0x00, 0x00, 0x8C, 0xFE, 0xFF, 0xFF, 0x03, 0x00, 0x08, 0x00, 0x64, 0x00, 0xFF, 0x00, 0x78, 0xFE, 0xFF, 0xFF, 0x65, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x09, 0x00, 0x00, 0x80, 0x09, 0x00, 0x01, 0x80, 0x2A, 0x00, 0x00, 0x80, 0x1D, 0x00, 0x2A, 0x00, 0x01, 0x80, 0x02, 0x00, 0x1C, 0x00, 0xF5, 0x0A, 0x0A, 0x00, 0x01, 0x80, 0x0A, 0x00, 0x00, 0x80, 0x3C, 0x00, 0x00, 0x04, 0x25, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x3F, 0x00, 0x28, 0x00, 0xA0, 0x40, 0x03, 0x00, 0x24, 0x00, 0xE9, 0x02, 0x24, 0x00, 0xE8, 0x02, 0x28, 0x00, 0x15, 0x41, 0x01, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x2E, 0x00, 0x3F, 0x01, 0x41, 0x01, 0x43, 0x01, 0xD8, 0x25, 0x00, 0x00, 0x00, 0xD0, 0x0E, 0x00, 0x00, 0x80, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0A, 0x00, 0x01, 0x00, 0x45, 0x01, 0x24, 0x00, 0xE4, 0x02, 0x6B, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0xA3, 0x01, 0xA7, 0x01, 0xA6, 0x00, 0x59, 0x05, 0xA8, 0x00, 0x4F, 0x02, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00, 0x65, 0x00, 0x45, 0x01, 0x42, 0x01, 0x40, 0x01, 0x2F, 0x00, 0x02, 0x00, 0x64, 0x00, 0x00, 0x00, 0xC2, 0xFD, 0xFF, 0xFF, 0x65, 0x00, 0x4C, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x44, 0x01, 0x28, 0x00, 0x45, 0x01, 0x42, 0x01, 0x40, 0x01, 0x64, 0x00, 0xFF, 0x00, 0x8D, 0xFD, 0xFF, 0xFF, 0x65, 0x00, 0x30, 0x00, 0x2F, 0x00, 0x02, 0x00, 0x04, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0xE0, 0x02, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0A, 0x00, 0x00, 0x00, 0xD7, 0x01, 0x07, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0xE1, 0x02, 0x08, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01, 0x00, 0x1F, 0x00, 0xFF, 0x0A, 0x00, 0x00, 0x00, 0xD7, 0x01, 0x08, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };

        static List<short> itemPool = new List<short>()
        {
            25, 27, 28, 41, 50, 51, 80, 81, 82, 83, 84, 85, 91, 107, 108, 109, 110, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 321, 322, 323, 324, 325, 326, 327, 538, 540, 541, 542, 543, 544, 545, 546, 547
        };

        //200 - 400 Transport NPCs
        //400 - 600 Trainer Fights
        //600 - 700 Wild Fights
        //700 - 800 Healers
        //800 - 900 Shops
        //900 - 1000 Items

        static ScriptSequence GoToHealerScript(int id, int roomNumber) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Clear Flags
                new ScriptCommand(0x23, new int[] { id + 200 }),
                new ScriptCommand(0x23, new int[] { id + 400 }),
                new ScriptCommand(0x23, new int[] { id + 600 }),
                new ScriptCommand(0x23, new int[] { id + 700 }),
                new ScriptCommand(0x23, new int[] { id + 800 }),
                new ScriptCommand(0x23, new int[] { id + 900 }),
                //Set Flags
                new ScriptCommand(0x24, new int[] { id + 201 }),
                new ScriptCommand(0x24, new int[] { id + 701 }),
                //Teleport
                new ScriptCommand(0xBF, new int[] { roomNumber, 5, 12, 0 }),
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence GoToPokemonCenterScript(int id, int roomNumber) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Clear Flags
                new ScriptCommand(0x23, new int[] { id + 200 }),
                new ScriptCommand(0x23, new int[] { id + 400 }),
                new ScriptCommand(0x23, new int[] { id + 600 }),
                new ScriptCommand(0x23, new int[] { id + 700 }),
                new ScriptCommand(0x23, new int[] { id + 800 }),
                new ScriptCommand(0x23, new int[] { id + 900 }),
                //Teleport
                new ScriptCommand(0xBF, new int[] { roomNumber, 7, 18, 0 }),
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence GoToShopScript(int id, int roomNumber) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Clear Flags
                new ScriptCommand(0x23, new int[] { id + 200 }),
                new ScriptCommand(0x23, new int[] { id + 400 }),
                new ScriptCommand(0x23, new int[] { id + 600 }),
                new ScriptCommand(0x23, new int[] { id + 700 }),
                new ScriptCommand(0x23, new int[] { id + 800 }),
                new ScriptCommand(0x23, new int[] { id + 900 }),
                //Set Flags
                new ScriptCommand(0x24, new int[] { id + 201 }),
                new ScriptCommand(0x24, new int[] { id + 801 }),
                //Teleport
                new ScriptCommand(0xBF, new int[] { roomNumber, 5, 12, 0 }),
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence GoToTrainerScript(int id, int roomNumber) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Clear Flags
                new ScriptCommand(0x23, new int[] { id + 200 }),
                new ScriptCommand(0x23, new int[] { id + 400 }),
                new ScriptCommand(0x23, new int[] { id + 600 }),
                new ScriptCommand(0x23, new int[] { id + 700 }),
                new ScriptCommand(0x23, new int[] { id + 800 }),
                new ScriptCommand(0x23, new int[] { id + 900 }),
                //Set Flags
                new ScriptCommand(0x24, new int[] { id + 201 }),
                new ScriptCommand(0x24, new int[] { id + 401 }),
                //Teleport
                new ScriptCommand(0xBF, new int[] { roomNumber, 5, 12, 0 }),
                //End
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence GoToWildScript(int id, int roomNumber) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Clear Flags
                new ScriptCommand(0x23, new int[] { id + 200 }),
                new ScriptCommand(0x23, new int[] { id + 400 }),
                new ScriptCommand(0x23, new int[] { id + 600 }),
                new ScriptCommand(0x23, new int[] { id + 700 }),
                new ScriptCommand(0x23, new int[] { id + 800 }),
                new ScriptCommand(0x23, new int[] { id + 900 }),
                //Set Flags
                new ScriptCommand(0x24, new int[] { id + 201 }),
                new ScriptCommand(0x24, new int[] { id + 601 }),
                //Teleport
                new ScriptCommand(0xBF, new int[] { roomNumber, 5, 12, 0 }),
                //End
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence GoToItemScript(int id, int roomNumber) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Clear Flags
                new ScriptCommand(0x23, new int[] { id + 200 }),
                new ScriptCommand(0x23, new int[] { id + 400 }),
                new ScriptCommand(0x23, new int[] { id + 600 }),
                new ScriptCommand(0x23, new int[] { id + 700 }),
                new ScriptCommand(0x23, new int[] { id + 800 }),
                new ScriptCommand(0x23, new int[] { id + 900 }),
                //Set Flags
                new ScriptCommand(0x24, new int[] { id + 201 }),
                new ScriptCommand(0x24, new int[] { id + 901 }),
                //Teleport
                new ScriptCommand(0xBF, new int[] { roomNumber, 5, 12, 0 }),
                //End
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence HealerScript() => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Heal
                new ScriptCommand(0x2E, new int[0]),
                new ScriptCommand(0xA6, new int[] { 1391 }),
                new ScriptCommand(0x74, new int[0]),
                new ScriptCommand(0xA8, new int[0]),
                new ScriptCommand(0x104, new int[0]),
                //RemoveNPC
                new ScriptCommand(0x6C, new int[] { activeNPCs.Count }),
                //End
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence ShopScript() => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Setup Vars
                new ScriptCommand(0x2E, new int[0]),
                new ScriptCommand(0xA6, new int[] { 1351 }),
                new ScriptCommand(0x09, new int[] { 0x8000 }),
                new ScriptCommand(0x09, new int[] { 0x8001 }),
                new ScriptCommand(0x2A, new int[] { 0x8000, 255 }),
                new ScriptCommand(0x2A, new int[] { 0x8001, 1 }),
                //CallStd
                new ScriptCommand(0x1C, new int[] { 10110 }),
                //End
                new ScriptCommand(0x0A, new int[] { 0x8000 }),
                new ScriptCommand(0x0A, new int[] { 0x8001 }),
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence TrainerScript(int id) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Battle
                new ScriptCommand(0x2E, new int[0]),
                new ScriptCommand(0x85, new int[] { id, 0, 0 }),
                //Remove NPC
                new ScriptCommand(0x6C, new int[] { activeNPCs.Count }),
                //Post Battle
                new ScriptCommand(0x8D, new int[] { 0x8010 }),
                new ScriptCommand(0x09, new int[] { 0x8010 }),
                new ScriptCommand(0x08, new int[] { 1 }),
                new ScriptCommand(0x11, new int[] { 1 }),
                new ScriptCommand(0x1F, new int[] { 0xFF, 8 }),
                new ScriptCommand(0x8E, new int[0]),
                new ScriptCommand(0x1E, new int[] { 2 }),
                new ScriptCommand(0x8C, new int[0]),
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence BossScript(int id) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Battle
                new ScriptCommand(0x2E, new int[0]),
                new ScriptCommand(0x85, new int[] { id, 0, 0 }),
                //Remove NPC
                new ScriptCommand(0x6C, new int[] { activeNPCs.Count }),
                //Post Battle
                new ScriptCommand(0x8D, new int[] { 0x8010 }),
                new ScriptCommand(0x09, new int[] { 0x8010 }),
                new ScriptCommand(0x08, new int[] { 1 }),
                new ScriptCommand(0x11, new int[] { 1 }),
                new ScriptCommand(0x1F, new int[] { 0xFF, 8 }),
                new ScriptCommand(0x8E, new int[0]),
                new ScriptCommand(0x1E, new int[] { 2 }),
                new ScriptCommand(0x8C, new int[0]),
                new ScriptCommand(0xD6, new int[] { 0 }),
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence WildScript(int pokemon, int level) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Battle
                new ScriptCommand(0x2E, new int[0]),
                new ScriptCommand(0x174, new int[] { pokemon, level, 1 }),
                //Remove NPC
                new ScriptCommand(0x6C, new int[] { activeNPCs.Count }),
                //Post Battle
                new ScriptCommand(0x177, new int[] { 0x8010 }),
                new ScriptCommand(0x09, new int[] { 0x8010 }),
                new ScriptCommand(0x08, new int[] { 1 }),
                new ScriptCommand(0x11, new int[] { 1 }),
                new ScriptCommand(0x1F, new int[] { 0xFF, 8 }),
                new ScriptCommand(0x175, new int[0]),
                new ScriptCommand(0x1E, new int[] { 2 }),
                new ScriptCommand(0x176, new int[0]),
                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static ScriptSequence ItemScript(int item) => new ScriptSequence()
        {
            commands = new List<ScriptCommand>()
            {
                //Give Item
                new ScriptCommand(0x2E, new int[0]),
                new ScriptCommand(0x09, new int[] { 0x8000 }),
                new ScriptCommand(0x09, new int[] { 0x8001 }),
                new ScriptCommand(0x2A, new int[] { 0x8000, item }),
                new ScriptCommand(0x2A, new int[] { 0x8001, 1 }),
                new ScriptCommand(0x1C, new int[] { 0xAF5 }),
                new ScriptCommand(0x0A, new int[] { 0x8000 }),
                new ScriptCommand(0x0A, new int[] { 0x8001 }),
                //Remove NPC
                new ScriptCommand(0x6C, new int[] { activeNPCs.Count }),

                new ScriptCommand(0x30, new int[0]),
                new ScriptCommand(0x2F, new int[0]),
                new ScriptCommand(0x02, new int[0])
            }
        };

        static OverworldNPC TransportHealerNPC(int id, int xPos) => new OverworldNPC()
        {
            sprite = 51,
            defaultDirection = 1,
            flag = (short)(id + 200),
            xPosition = (short)xPos,
            yPosition = 2,
            scriptUsed = (short)activeScripts.sequences.Count
        };
        static OverworldNPC TransportShopNPC(int id, int xPos) => new OverworldNPC()
        {
            sprite = 77,
            defaultDirection = 1,
            flag = (short)(id + 200),
            xPosition = (short)xPos,
            yPosition = 2,
            scriptUsed = (short)activeScripts.sequences.Count
        };
        static OverworldNPC TransportTrainerNPC(int id, int xPos) => new OverworldNPC()
        {
            sprite = 11,
            defaultDirection = 1,
            flag = (short)(id + 200),
            xPosition = (short)xPos,
            yPosition = 2,
            scriptUsed = (short)activeScripts.sequences.Count
        };
        static OverworldNPC TransportBossNPC(int id, int sprite, int xPos) => new OverworldNPC()
        {
            sprite = (short)sprite,
            defaultDirection = 1,
            flag = (short)(id + 200),
            xPosition = (short)xPos,
            yPosition = 2,
            scriptUsed = (short)activeScripts.sequences.Count
        };
        static OverworldNPC TransportWildNPC(int id, int xPos) => new OverworldNPC()
        {
            sprite = 37,
            defaultDirection = 1,
            flag = (short)(id + 200),
            xPosition = (short)xPos,
            yPosition = 2,
            scriptUsed = (short)activeScripts.sequences.Count
        };
        static OverworldNPC TransportItemNPC(int id, int xPos) => new OverworldNPC()
        {
            sprite = 110,
            defaultDirection = 1,
            flag = (short)(id + 200),
            xPosition = (short)xPos,
            yPosition = 2,
            scriptUsed = (short)activeScripts.sequences.Count
        };

        static OverworldNPC HealerNPC(int id) => new OverworldNPC()
        {
            sprite = 51,
            defaultDirection = 1,
            flag = (short)(id + 700),
            xPosition = 5,
            yPosition = 6,
            scriptUsed = (short)activeScripts.sequences.Count
        };

        static OverworldNPC PCHealerNPC() => new OverworldNPC()
        {
            sprite = 51,
            defaultDirection = 1,
            flag = 0,
            xPosition = 8,
            yPosition = 15,
            scriptUsed = 1
        };

        static OverworldNPC PCTrainerNPC() => new OverworldNPC()
        {
            sprite = 11,
            defaultDirection = 1,
            flag = 0,
            xPosition = 7,
            yPosition = 12,
            scriptUsed = 2
        };

        static OverworldNPC PCTmNPC() => new OverworldNPC()
        {
            sprite = 110,
            defaultDirection = 1,
            flag = 0,
            xPosition = 6,
            yPosition = 15,
            scriptUsed = 3
        };

        static OverworldNPC ShopNPC(int id) => new OverworldNPC()
        {
            sprite = 77,
            defaultDirection = 1,
            flag = (short)(id + 800),
            xPosition = 5,
            yPosition = 8,
            scriptUsed = (short)activeScripts.sequences.Count
        };

        static OverworldNPC TrainerNPC(int id) => new OverworldNPC()
        {
            sprite = 11,
            defaultDirection = 1,
            flag = (short)(id + 400),
            xPosition = 5,
            yPosition = 6,
            scriptUsed = (short)activeScripts.sequences.Count,
            sightRange = 4
        };

        static OverworldNPC WildPokemonNPC(int id) => new OverworldNPC()
        {
            sprite = 4229,
            defaultDirection = 1,
            flag = (short)(id + 600),
            xPosition = 5,
            yPosition = 6,
            scriptUsed = (short)activeScripts.sequences.Count
        };

        static OverworldNPC ItemNPC(int id) => new OverworldNPC()
        {
            sprite = 110,
            defaultDirection = 1,
            flag = (short)(id + 900),
            xPosition = 5,
            yPosition = 6,
            scriptUsed = (short)activeScripts.sequences.Count
        };

        static OverworldNPC BossNPC(int id, int sprite) => new OverworldNPC()
        {
            sprite = (short)sprite,
            defaultDirection = 1,
            flag = (short)(id + 400),
            xPosition = 5,
            yPosition = 6,
            scriptUsed = (short)activeScripts.sequences.Count,
            sightRange = 4
        };

        static void StandardizeXpYeilds()
        {
            foreach (PokemonEntry p in MainEditor.pokemonDataNarc.pokemon)
            {
                p.catchRate = (byte)(p.catchRate * 1.25f);
                p.levelRate = 4;
                p.xpYield = (short)(p.baseStatTotal / 1.5f);
                p.ApplyData();
            }
        }

        static void BanMoves()
        {
            for (int i = 0; i < MainEditor.pokemonDataNarc.pokemon.Count; i++)
            {
                if (MainEditor.pokemonDataNarc.pokemon[i].levelUpMoves != null) for (int j = 0; j < MainEditor.pokemonDataNarc.pokemon[i].levelUpMoves.moves.Count; j++)
                {
                    if (MainEditor.pokemonDataNarc.pokemon[i].levelUpMoves.moves[j].moveID == 82)
                    {
                        short level = MainEditor.pokemonDataNarc.pokemon[i].levelUpMoves.moves[j].level;
                        MainEditor.pokemonDataNarc.pokemon[i].levelUpMoves.moves[j] = new LevelUpMoveSlot(239, level);
                        MainEditor.pokemonDataNarc.pokemon[i].levelUpMoves.ApplyData();
                    }
                }
            }
        }

        public static void ModifyStarterHouseText()
        {
            MainEditor.storyTextNarc.textFiles[173].text[2] = "You received a starter!";
            MainEditor.storyTextNarc.textFiles[173].text[6] = "Good Luck!";
            MainEditor.storyTextNarc.textFiles[173].CompressData();
        }

        static int trainerBattleFormat = 0;

        public static void ApplyMode(int battleFormat)
        {
            trainerBattleFormat = battleFormat;
            pokemonListByBST = new List<PokemonEntry>(MainEditor.pokemonDataNarc.pokemon);
            pokemonListByBST.RemoveAll(p => p.baseStatTotal < 250 || p.baseStatTotal > 600 || MainEditor.pokemonDataNarc.pokemon.IndexOf(p) > 649);
            pokemonListByBST.Sort((p1, p2) => Math.Sign(p1.baseStatTotal - p2.baseStatTotal));

            BSTGroups = new List<List<PokemonEntry>>();
            for (int i = 0; i < bossPools.Count; i++)
            {
                int div = pokemonListByBST.Count / bossPools.Count;
                int min = Math.Max(i * div - 10, 0);
                int max = Math.Min((i + 1) * div + 10, pokemonListByBST.Count);
                BSTGroups.Add(pokemonListByBST.GetRange(min, max - min));
            }

            //Clear trainer text
            for (int i = 0; i < MainEditor.textNarc.textFiles[381].text.Count; i++) MainEditor.textNarc.textFiles[381].text[i] = "";
            for (int i = 0; i < MainEditor.textNarc.textFiles[382].text.Count; i++) MainEditor.textNarc.textFiles[382].text[i] = "";
            SetupTrainers();

            //Clear out everything
            StandardizeXpYeilds();
            BanMoves();
            foreach (OverworldObjectsEntry o in MainEditor.overworldsNarc.objects)
            {
                int i = MainEditor.overworldsNarc.objects.IndexOf(o);
                if (i != 167) o.NPCs?.Clear();
                o.triggers?.Clear();
                o.warps?.Clear();
                o.furniture?.Clear();
                o.endData?.Clear();

                o.ApplyData();
            }
            CreateMaps();

            //Setup Starter House
            MainEditor.scriptNarc.scriptFiles[856].bytes = StarterHouseScriptBytes.ToArray();
            MainEditor.scriptNarc.scriptFiles[856].ReadData();
            //for (int n = 1; n < 1000; n++)
            //{
            //    if (n != 201 && n != 401) MainEditor.scriptNarc.scriptFiles[856].sequences[3].commands.Insert(MainEditor.scriptNarc.scriptFiles[856].sequences[3].commands.Count - 3,
            //        new ScriptCommand(0x23, new int[] { n }));
            //}
            MainEditor.scriptNarc.scriptFiles[856].ApplyData();
            ModifyStarterHouseText();
            MainEditor.overworldsNarc.objects[167].endData.Clear();
            MainEditor.overworldsNarc.objects[167].ApplyData();

            //4x trainer
            //2x healer
            //1x shop
            //2x wild pokemon
            //1x item
            List<int> roomTypeWeights = new List<int>()
            {
                0, 0, 0, 0, 1, 1, 2, 3, 3, 4
            };

            List<int> pathNumWeights = new List<int>()
            {
                1, 2, 2, 2, 3, 3
            };

            int trainer = 1;
            for (int i = 0; i < bosses.Count; i++)
            {
                activeNPCs = MainEditor.overworldsNarc.objects[i].NPCs;
                PCRoomNPCs = MainEditor.overworldsNarc.objects[i + 40].NPCs;
                activeScripts = MainEditor.scriptNarc.scriptFiles[i * 2];
                PCRoomScripts = MainEditor.scriptNarc.scriptFiles[(i + 40) * 2];
                int activeRoomNumber = i;
                int PCRoomNumber = i + 40;
                activeScripts.sequences.Clear();
                MainEditor.overworldsNarc.objects[i].endData.Clear();

                for (int j = 1; j <= bosses[i].floor - (i != 0 ? bosses[i - 1].floor : 0); j++)
                {
                    if (j == 1)
                    {
                        activeScripts.sequences.Add(TrainerScript(trainer));
                        activeNPCs.Add(TrainerNPC(j));
                    }
                    else if (j == (bosses[i].floor - (i != 0 ? bosses[i - 1].floor : 0)))
                    {
                        activeScripts.sequences.Add(GoToTrainerScript(j - 1, activeRoomNumber));
                        activeNPCs.Add(TransportBossNPC(j - 1, bosses[i].spriteID, 5));

                        activeScripts.sequences.Add(BossScript(trainer));
                        activeNPCs.Add(BossNPC(j, bosses[i].spriteID));

                        activeScripts.sequences.Add(GoToPokemonCenterScript(j, PCRoomNumber));
                        activeNPCs.Add(TransportHealerNPC(j, 5));
                    }
                    else
                    {
                        //Random from 1 to 3 paths
                        int max = pathNumWeights[random.Next(pathNumWeights.Count)];

                        List<int> used = new List<int>();
                        for (int k = 0; k < max; k++)
                        {
                            int type = roomTypeWeights[random.Next(roomTypeWeights.Count)];
                            while (used.Contains(type)) type = roomTypeWeights[random.Next(roomTypeWeights.Count)];
                            used.Add(type);

                            //Don't allow only a healer
                            if (max == 1 && type == 1) max++;

                            switch (type)
                            {
                                case 0:
                                    activeScripts.sequences.Add(GoToTrainerScript(j - 1, activeRoomNumber));
                                    activeNPCs.Add(TransportTrainerNPC(j - 1, 5 - (max - 1) + (k * 2)));

                                    activeScripts.sequences.Add(TrainerScript(trainer));
                                    activeNPCs.Add(TrainerNPC(j));
                                    break;
                                case 1:
                                    activeScripts.sequences.Add(GoToHealerScript(j - 1, activeRoomNumber));
                                    activeNPCs.Add(TransportHealerNPC(j - 1, 5 - (max - 1) + (k * 2)));

                                    activeScripts.sequences.Add(HealerScript());
                                    activeNPCs.Add(HealerNPC(j));
                                    break;
                                case 2:
                                    activeScripts.sequences.Add(GoToShopScript(j - 1, activeRoomNumber));
                                    activeNPCs.Add(TransportShopNPC(j - 1, 5 - (max - 1) + (k * 2)));

                                    activeScripts.sequences.Add(ShopScript());
                                    activeNPCs.Add(ShopNPC(j));
                                    break;
                                case 3:
                                    activeScripts.sequences.Add(GoToWildScript(j - 1, activeRoomNumber));
                                    activeNPCs.Add(TransportWildNPC(j - 1, 5 - (max - 1) + (k * 2)));

                                    activeScripts.sequences.Add(WildScript(BSTGroups[i][random.Next(BSTGroups[i].Count)].nameID, 3 + trainer / 2));
                                    activeNPCs.Add(WildPokemonNPC(j));
                                    break;
                                case 4:
                                    activeScripts.sequences.Add(GoToItemScript(j - 1, activeRoomNumber));
                                    activeNPCs.Add(TransportItemNPC(j - 1, 5 - (max - 1) + (k * 2)));

                                    activeScripts.sequences.Add(ItemScript(itemPool[random.Next(itemPool.Count)]));
                                    activeNPCs.Add(ItemNPC(j));
                                    break;
                            }
                        }
                    }
                    trainer++;
                }
                MainEditor.overworldsNarc.objects[i].ApplyData();
                activeScripts.ApplyData();
            }

            MainEditor.textNarc.textFiles[381].CompressData();
            MainEditor.textNarc.textFiles[382].CompressData();
        }

        static void CreateMaps()
        {
            for (int i = 0; i < 40; i++)
            {
                Array.Copy(MainEditor.zoneDataNarc.zones[438].bytes, MainEditor.zoneDataNarc.zones[i].bytes, 48);
                MainEditor.zoneDataNarc.zones[i].ReadData();
                MainEditor.zoneDataNarc.zones[i].mapId = (short)i;
                MainEditor.zoneDataNarc.zones[i].scriptFile = (short)(i * 2);
                MainEditor.zoneDataNarc.zones[i].ApplyData();
            }
            for (int i = 40; i < 80; i++)
            {
                Array.Copy(MainEditor.zoneDataNarc.zones[435].bytes, MainEditor.zoneDataNarc.zones[i].bytes, 48);
                MainEditor.zoneDataNarc.zones[i].ReadData();
                MainEditor.zoneDataNarc.zones[i].mapId = (short)i;
                MainEditor.zoneDataNarc.zones[i].scriptFile = (short)(i * 2);
                MainEditor.zoneDataNarc.zones[i].ApplyData();

                activeNPCs = MainEditor.overworldsNarc.objects[i].NPCs;

                MainEditor.scriptNarc.scriptFiles[i * 2].sequences.Clear();
                MainEditor.scriptNarc.scriptFiles[i * 2].sequences.Add(HealerScript());
                activeNPCs.Add(PCHealerNPC());
                MainEditor.scriptNarc.scriptFiles[i * 2].sequences.Add(GoToTrainerScript(0, i - 39));
                activeNPCs.Add(PCTrainerNPC());
                MainEditor.scriptNarc.scriptFiles[i * 2].sequences.Add(ItemScript(random.Next(328, 426)));
                activeNPCs.Add(PCTmNPC());
                if (i - 39 < bosses.Count) MainEditor.overworldsNarc.objects[i].NPCs[1].sprite = (short)bosses[i - 39].spriteID;
                MainEditor.overworldsNarc.objects[i].ApplyData();
                MainEditor.scriptNarc.scriptFiles[i * 2].ApplyData();
            }
        }

        static void SetupTrainers()
        {
            TrainerDataNARC data = MainEditor.trainerNarc;
            TrainerPokeNARC poke = MainEditor.trainerPokeNarc;
            data.trainers.RemoveRange(1, data.trainers.Count - 1);
            poke.pokemonGroups.RemoveRange(1, poke.pokemonGroups.Count - 1);

            bosses = new List<Boss>();
            for (int i = 0; i < bossPools.Count; i++)
            {
                Boss boss = bossPools[i][random.Next(bossPools[i].Count)];
                while (bosses.Exists(b => b.name == boss.name)) boss = bossPools[i][random.Next(bossPools[i].Count)];
                bosses.Add(boss);
            }

            for (int i = 0; i <= bosses[bosses.Count - 1].floor; i++)
            {
                int area = bosses.FindIndex(b => b.floor >= i);

                if (i == bosses[area].floor - 1)
                {
                    TrainerEntry tr = QuickTrainer((byte)bosses[area].trainerClass, (byte)bosses[area].level, bosses[area].pokemon.ToArray());
                    tr.AI = 7;
                    if (tr.battleType == 1 || tr.battleType == 2) tr.AI = (byte)(tr.AI | 128);
                    tr.ApplyData();
                    data.trainers.Add(tr);
                    MainEditor.textNarc.textFiles[382].text[i + 1] = bosses[area].name;
                }
                else
                {
                    List<PokemonEntry> pool = BSTGroups[area];
                    int num = random.Next(HelperFunctions.Clamp((area + 2) / 2, 1, 5), HelperFunctions.Clamp(area + 2, 2, 6) + 1);
                    short[] pokes = new short[num];

                    for (int j = 0; j < num; j++)
                    {
                        int r = random.Next(pool.Count);
                        if (area <= 1)
                        {
                            while (pool[r].type1 == 5 || pool[r].type1 == 7 || pool[r].type1 == 8 ||
                                pool[r].type2 == 5 || pool[r].type2 == 7 || pool[r].type2 == 8) r = random.Next(pool.Count);
                        }
                        pokes[j] = (short)MainEditor.pokemonDataNarc.pokemon.IndexOf(pool[r]);
                    }
                    data.trainers.Add(QuickTrainer(2, (byte)(4 - num + (i / 1.6f) - (i > 6 && num == 2 ? 1 : 0)), pokes));
                }
            }

            for (int i = 1; i < data.trainers.Count; i++) poke.pokemonGroups.Add(data.trainers[i].pokemon);
        }

        static TrainerEntry QuickTrainer(byte trainerClass, byte level, params short[] pokemon)
        {
            List<byte> bytes = new List<byte>();
            foreach (short p in pokemon)
            {
                bytes.AddRange(new byte[] { 0, 0, level, 0 });
                bytes.AddRange(BitConverter.GetBytes(p));
                bytes.AddRange(new byte[] { 0, 0 });
            }
            TrainerEntry trainer = new TrainerEntry(new byte[20] { 0, trainerClass, 0, (byte)pokemon.Length, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 8, 0, 0 });
            trainer.nameID = MainEditor.trainerNarc.trainers.Count;

            trainer.battleType = (byte)(trainerBattleFormat == 0 ? 0 :
                trainerBattleFormat == 1 ? Math.Min(trainer.numPokemon - 1, 1) : 
                (trainer.numPokemon == 1 ? 0 : trainer.numPokemon == 2 ? 1 : trainerBattleFormat));
            if (trainer.battleType == 1 || trainer.battleType == 2) trainer.AI = (byte)(trainer.AI | 128);

            TrainerPokemonEntry poke = new TrainerPokemonEntry(bytes.ToArray(), trainer);
            trainer.ApplyData();
            return trainer;
        }
        static TrainerEntry QuickTrainer(byte trainerClass, byte level, params string[] pokemon)
        {
            List<short> poke = new List<short>();
            foreach (string s in pokemon)
            {
                if (MainEditor.pokemonDataNarc.pokemon.Exists(p => p.ToString().Contains(s)))
                    poke.Add((short)MainEditor.pokemonDataNarc.pokemon.FindIndex(p => p.ToString().Contains(s)));
                else return null;
            }
            return QuickTrainer(trainerClass, level, poke.ToArray());
        }

        struct Boss
        {
            public int floor;
            public string name;
            public int spriteID;
            public int trainerClass;
            public int level;
            public List<string> pokemon;

            public Boss(int floor, string name, int spriteID, int trainerClass, int level, List<string> pokemon)
            {
                this.floor = floor;
                this.name = name;
                this.spriteID = spriteID;
                this.trainerClass = trainerClass;
                this.level = level;
                this.pokemon = pokemon;
            }
        }
    }
}
